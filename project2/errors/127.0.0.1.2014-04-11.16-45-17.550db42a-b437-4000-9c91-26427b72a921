(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Table' object has no attribute 'category'"
p3
sS'layer'
p4
S'/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project2/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if \'login\' in request.args:\n        db.auth_user.username.label = T("Username or Email")\n        auth.settings.login_userfield = \'username\'\n        if request.vars.username and not IS_EMAIL()(request.vars.username)[1]:\n            auth.settings.login_userfield = \'email\'\n            request.vars.email = request.vars.username\n            request.post_vars.email = request.vars.email\n            request.vars.username = None\n            request.post_vars.username = None\n            return dict(form=auth())\n        return dict(form=auth())\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\ndef quiz():\n    if request.vars.subcategory_id:\n        lists = db(db.subcategory.category_id==request.vars.subcategory_id).select(db.subcategory.ALL)\n    else:\n        lists = db(db.subcategory.category_id==1).select(db.subcategory.ALL)\n    \n    print request.vars.subcategory_id\n    \n    categories = db().select(db.category.ALL)\n\n    if request.vars.category_id:\n        makers = db(db.subcategory.id==request.vars.category_id).select(db.subcategory.ALL)\n    else:\n        makers = db(db.subcategory.id==1).select(db.subcategory.ALL)\n    return dict(lists=lists, categories=categories, makers=makers)\n\ndef maker():\n    makers = db(db.subcategory.category.id==request.vars.category_id).select(db.category.ALL)\n    result = "<select name=\'subcategory_id\'>"\n    for maker in makers:\n        result += "<option value=\'" + str(maker.id) + "\'>" + maker.name + "</option>"  \n    result += "</select>"\n    return XML(result)\n\ndef login():\n    redirect(URL(\'user/login\'))\n\ndef register():\n    redirect(URL(\'user/register\'))\n    \n@auth.requires_login()\ndef changepassword():\n    redirect(URL(\'user/change_password\'))\n\n@auth.requires_login()\ndef profile():\n    redirect(URL(\'user/profile\'))\n\n\'\'\'def all_records():\n    grid = SQLFORM.grid(db.auth.settings.table_user_name,user_signature=False)\n    return locals()\'\'\'\n\ndef retrieve():\n    redirect(URL(\'user/retrieve_password\'))\n\n@auth.requires_login()\ndef hello():\n    return dict(message=\'hello %(first_name)s %(last_name)s\' % auth.user)\n\ndef take_ques1():\n    table_name=request.get_vars[\'name\']\n    form = SQLFORM(db,str(table_name))\n    if form.process(session=None, formname=\'test\').accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors or passed arguements are invalid\'\n    else:\n        response.flash = \'please fill the form\'\n    # Note: no form instance is passed to the view\n    return dict()\n\ndef take_ques2():\n    form = SQLFORM(db.sports)\n    if form.process(session=None, formname=\'test\').accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors or passed arguements are invalid\'\n    else:\n        response.flash = \'please fill the form\'\n    # Note: no form instance is passed to the view\n    return dict()\n\ndef take_ques3():\n    form = SQLFORM(db.aptitude)\n    if form.process(session=None, formname=\'test\').accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors or passed arguements are invalid\'\n    else:\n        response.flash = \'please fill the form\'\n    # Note: no form instance is passed to the view\n    return dict()\n\ndef select():\n    """\n    Display log event into usage_statistics table.\n    """\n    db.usage_statistics.id.readable = False\n    table = SQLFORM.grid(db.usage_statistics, orderby=~db.usage_statistics.time_stamp, ui=\'jquery-ui\', formstyle = \'divs\')\n    return dict(table=table)\nresponse._vars=response._caller(maker)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project2/controllers/default.py", line 179, in <module>\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project2/controllers/default.py", line 106, in maker\n    makers = db(db.subcategory.category.id==request.vars.category_id).select(db.category.ALL)\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/dal.py", line 8912, in __getitem__\n    return ogetattr(self, str(key))\nAttributeError: \'Table\' object has no attribute \'category\'\n'
p11
s.