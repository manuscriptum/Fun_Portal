(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> '2'"
p3
sS'layer'
p4
S'/home/dell/Downloads/web2py/applications/practice1/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef java():\n        return dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n#serialNumber = 0\n\ndef Topic():\n  print \'called\'\n  session.topic = request.vars.top\n#  session.topic = request.vars.top\n#  redirect(URL("quiz"))\n\ndef quizTopic():\n  if request.vars.topic is not None:\n    session.topic = request.vars.topic\n    redirect(URL("quiz"))\n  return dict()     \n\ndef quiz():\n\n   if session.topic == \'Football\':\n        var=db(db.Football.Serial == 1).select()\n       # return dict(var=var)\n   if session.topic == \'International\':\n        var = db(db.International.Serial == 1).select()\n   var1 = request.vars.option\n   session.counter = 1\n   return dict(var = var) \n\ndef nextQuestion():\n   session.counter+=1\n#   print session.counter\n   if session.topic == \'Football\':\n       var2=db(db.Football.Serial == session.counter).select()\n   if session.topic == \'International\':\n       var2 = db(db.International.Serial == session.counter).select()\n   d={}\n   for i in var2:\n        d["serial"]=i.Serial\n        d["question"]=i.question\n        d["opt1"]=i.opt1\n        d["opt2"]=i.opt2\n   \n#   if session.ansDict[numb]:\n#        print \'Next\'\n#   response.flash = "You selected " + session.ansDict[session.num]\n#   else:\n#        response.flash = "Select an option"\n#   print session.ansDict\n   numb = session.num\n#   print type(numb)\n#   print numb\n#   numb = int(numb)\n#   print numb\n#   numb = str(numb)\n#   print type(numb)\n   import json\n   s = json.dumps(d)\n#   print session.ansDict\n#   print request.vars.SerialNumber\n#   index = request.vars.SerialNumber - 1\n#   try:\n#        session.ans[index]\n#   numb = str(numb)\n   session.flash = "You selected " + session.ansDict[numb]\n   return s\n\n#   except:\n#        response.flash = "Select an option"\n#   print session.num\n         \n\n\ndef prevQuestion():\n   if session.counter == 1:\n        return dict()\n   session.counter-=1\n   if session.topic == \'Football\':\n       var2=db(db.Football.Serial == session.counter).select()\n   if session.topic == \'International\':\n       var2 = db(db.International.Serial == session.counter).select()\n   d={}\n   for i in var2:\n        d["serial"]=i.Serial\n        d["question"]=i.question\n        d["opt1"]=i.opt1\n        d["opt2"]=i.opt2\n   numb = session.num\n #  numb = int(numb)\n #  numb = numb - 1\n #  numb = str(numb)\n   import json\n   s = json.dumps(d)\n   return s\n#   if session.ansDict[numb]:\n#   print session.ansDict[numb]\n#   response.flash = "You selected " + session.ansDict[session.num]\n#   print session.num\n#   else:\n#        response.flash = "Select an option"\n#   print session.ansDict\n#   index = request.vars.SerialNumber - 1\n#   try:\n#        session.ans[index]\n#        response.flash = "You selected " + session.ans[index]\n#   except:\n#        response.flash = "Select an option"\n         \n\ndef selectedOption():\n#   index = request.vars.SerialNumber - 1\n#   serialNumber = request.vars.SerialNumber\n#   response.flash = "You selected " + request.vars.value\n    numb = session.num\n#    numb = int(numb)\n#    print session.num\n#   print request.vars.SerialNumber\n#    print numb\n    if session.ansDict is None:\n       session.ansDict = {}\n    session.ansDict[numb] = request.vars.value\n#    print type(numb)\n#    print session.ansDict\n#    response.flash = "You selected " + request.vars.value\n\ndef tempSave():\n    session.num = request.vars.SerialNumber\n#    session.num = int(session.num)\n#    print session.num\n\n\nresponse._vars=response._caller(nextQuestion)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/dell/Downloads/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/dell/Downloads/web2py/applications/practice1/controllers/default.py", line 208, in <module>\n  File "/home/dell/Downloads/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/dell/Downloads/web2py/applications/practice1/controllers/default.py", line 141, in nextQuestion\n    session.flash = "You selected " + session.ansDict[numb]\nKeyError: \'2\'\n'
p11
s.