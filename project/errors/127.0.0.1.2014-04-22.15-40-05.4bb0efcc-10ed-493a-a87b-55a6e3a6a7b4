(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> cannot concatenate 'str' and 'int' objects"
p3
sS'layer'
p4
S'/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if \'login\' in request.args:\n        db.auth_user.username.label = T("Username or Email")\n        auth.settings.login_userfield = \'username\'\n        if request.vars.username and not IS_EMAIL()(request.vars.username)[1]:\n            auth.settings.login_userfield = \'email\'\n            request.vars.email = request.vars.username\n            request.post_vars.email = request.vars.email\n            request.vars.username = None\n            request.post_vars.username = None\n            return dict(form=auth())\n        return dict(form=auth())\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\ndef login():\n    redirect(URL(\'user/login\'))\n\ndef register():\n    redirect(URL(\'user/register\'))\n    \n@auth.requires_login()\ndef changepassword():\n    redirect(URL(\'user/change_password\'))\n\n@auth.requires_login()\ndef profile():\n    redirect(URL(\'user/profile\'))\n\n\'\'\'def all_records():\n    grid = SQLFORM.grid(db.auth.settings.table_user_name,user_signature=False)\n    return locals()\'\'\'\n\ndef retrieve():\n    redirect(URL(\'user/retrieve_password\'))\n\ndef memorygame():\n  if auth.user:\n    hs=auth.user.memorygame_high_score;\n  else:\n    hs=0;\n  return dict(hs=hs);\n\ndef dodgeball():\n  if auth.user:\n      hs=auth.user.dodgeball_high_score;\n  else:\n    hs=0; \n  return dict(hs=hs);\n\ndef check():\n  print request.vars.hs;\n  now=request.vars.hs;\n  if auth.user:\n      hs=auth.user.dodgeball_high_score;\n      if now>hs:\n        auth.user.dodgeball_high_score=now;\n        hs=now;\n  else:\n    hs=0;\n  return "<script>jQuery(\'#highscore\').replaceWith(\'"+hs+"\')</script>"\n  \n  \ndef subcategory():\n   var = db(db.subcategory.category_id == session.cat).select()\n   d = {}\n   count = 1\n   for i in var:\n     d[count] = i.name\n  #   d["serial"] = i.Serial\n     count += 1\n   d["len"] = count - 1\n   print d\n   import json\n   s = json.dumps(d)\n   return s\n\ndef game():\n  return dict() \n\ndef quizTopic():\n #  redirect(URL("quiz"))\n   var = db().select(db.category.ALL)\n   session.counter = 1\n   session.ansDict = {}\n#   redirect(URL("quiz2"))\n   return dict(var=var)\n   \n#   if session.topic is not None:\n#    session.topic = request.vars.topic\n#    redirect(URL("quiz"))\n#  return dict()     \n\ndef Tempquiz():\n#   try:\n    session.topic = request.vars.topic\n#    print request.vars.topic\n#    if session.topic is not None:\n#         print \'hello\'\n#    quiz2()\n#         session.topic = request.vars.topic\n #        redirect(URL("quiz"))       \n\n\ndef quiz():\n#   session.ansDict = {}\n#   session.topic = request.vars.topic\n#   session.flash = "Select an Option" \n#   if session.topic == \'Football\':\n#        var=db(db.Football.Serial == 1).select()\n       # return dict(var=var)\n#   if session.topic == \'International\':\n#        var = db(db.International.Serial == 1).select()\n#   var1 = request.vars.option\n#   session.counter = 1\n#   return dict(var = var)\n#   print session.cat\n#   print type(session.cat)\n   session.cat = int(session.cat)\n   session.subCatNumber = (session.cat)*100 + 1\n   session.quesNo = (session.subCatNumber)*100+1\n   session.first = session.quesNo\n#   print subCatNumber\n   session.counter = session.quesNo\n   var = db(db.questions.RollNo == session.quesNo).select()\n   #for i in var:\n    #    print i.opt1 \n\n   return dict(var = var)\n\n\ndef nextQuestion():\n   session.counter+=1\n#   if session.topic == \'Football\':\n   var = db(db.questions.RollNo == session.counter).select()\n#   if session.topic == \'International\':\n#       var2 = db(db.International.Serial == session.counter).select()\n   d={}\n   for i in var:\n        d["serial"]=i.RollNo\n        d["question"]=i.question\n        d["opt1"]=i.opt1\n        d["opt2"]=i.opt2\n        d["opt3"]=i.opt3\n        d["opt4"]=i.opt4\n\n   import json\n   s = json.dumps(d)\n   print d\n   nextFlash()\n   return s         \n\ndef nextFlash():\n   try:\n      numb = session.quesNo\n      numb = int(numb)\n      numb = numb + 1\n      numb = str(numb)\n      print session.ansDict\n  #    print \'nextCalled\'\n      session.flash = "You had selected " + session.ansDict[numb]\n   except:\n      session.flash = "Select an option"\ndef prevFlash():\n   try:\n       numb = session.quesNo\n       numb = int(numb)\n       numb = numb - 1\n       numb = str(numb)\n   #    print numb\n       print session.ansDict\n   #    print \'prevCalled\'\n       session.flash = "You had selected " + session.ansDict[numb]\n   except:\n       session.flash = "Select an option"\n\n\ndef prevQuestion():\n   if session.counter == session.first:\n        return dict()\n   session.counter-=1\n#   if session.topic == \'Football\':\n   var = db(db.questions.RollNo == session.counter).select()\n#   if session.topic == \'International\':\n#        var2 = db(db.International.Serial == session.counter).select()\n   d={}\n   for i in var:\n        d["serial"]=i.RollNo\n        d["question"]=i.question\n        d["opt1"]=i.opt1\n        d["opt2"]=i.opt2\n        d["opt3"]=i.opt3\n        d["opt4"]=i.opt4\n   import json\n   s = json.dumps(d)\n   prevFlash()\n   return s\n         \n\ndef selectedOption():\n    numb = session.quesNo\n    if session.ansDict is None:\n       session.ansDict = {}\n    session.ansDict[numb] = request.vars.value\n    print session.ansDict\n    response.flash = "You selected " + request.vars.value\n    \ndef tempSave():\n    session.quesNo = request.vars.SerialNumber\n\ndef quizDone():\n    return dict()\n\ndef cats():\n   session.cat = request.vars.val\n#   print session.cat\n\n\nresponse._vars=response._caller(check)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project/controllers/default.py", line 294, in <module>\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project/controllers/default.py", line 136, in check\n    return "<script>jQuery(\'#highscore\').replaceWith(\'"+hs+"\')</script>"\nTypeError: cannot concatenate \'str\' and \'int\' objects\n'
p11
s.