(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'auth'"
p3
sS'layer'
p4
S'/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    return dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if \'login\' in request.args:\n        db.auth_user.username.label = T("Username or Email")\n        auth.settings.login_userfield = \'username\'\n        if request.vars.username and not IS_EMAIL()(request.vars.username)[1]:\n            auth.settings.login_userfield = \'email\'\n            request.vars.email = request.vars.username\n            request.post_vars.email = request.vars.email\n            request.vars.username = None\n            request.post_vars.username = None\n            return dict(form=auth())\n        return dict(form=auth())\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\ndef login():\n    redirect(URL(\'user/login\'))\n\ndef register():\n    redirect(URL(\'user/register\'))\n    \n@auth.requires_login()\ndef changepassword():\n    redirect(URL(\'user/change_password\'))\n\n@auth.requires_login()\ndef profile():\n    redirect(URL(\'user/profile\'))\n\ndef all_records():\n    grid = SQLFORM.grid(db.auth.settings.table_user_name,user_signature=False)\n    return locals()\n\ndef retrieve():\n    redirect(URL(\'user/retrieve_password\'))\n\ndef subcategory():\n   var = db(db.subcategory.category_id == session.cat).select()\n   d = {}\n   count = 1\n   for i in var:\n     d[count] = i.name\n     count += 1\n   d["len"] = count - 1\n   import json\n   s = json.dumps(d)\n   return s\n\n@auth.requires_login()\ndef quizTopic():\n   session.correctNo = 0\n   session.wrongNo = 0\n   session.score = 0\n   session.notAttempted = 0\n   session.flag = 0\n   var = db().select(db.category.ALL)\n   session.counter = 1\n   session.ansDict = {}\n   return dict(var=var)\n   \ndef Tempquiz():\n  session.topic = request.vars.topic\n\n\nmp3_file=URL(r=request,c=\'static\',f=\'test.mp3\')\nwav_file=URL(r=request,c=\'static\',f=\'test.wav\')\n\ndef test_embed():\n  embed_mp3=XML(\'<embed src="%s" autoplay="false" loop="false" />\' % mp3_file)\n  embed_wav=XML(\'<embed src="%s" autoplay="true" loop="true" />\' % wav_file)\n  return dict(wav=embed_wav,mp3=embed_mp3)\n\n@auth.requires_login()\ndef quiz():\n   session.cat = int(session.cat)\n   session.topic=int(session.topic)\n   session.subCatNumber = (session.cat)*100 + session.topic\n   session.quesNo = (session.subCatNumber)*100+1\n   session.first = session.quesNo\n   session.last = session.first + 3\n   session.counter = session.quesNo\n   var = db(db.questions.RollNo == session.quesNo).select()\n   return dict(var = var)\n\n\ndef nextQuestion():\n   if session.counter == session.last:\n        return dict()\n   session.counter+=1\n   var = db(db.questions.RollNo == session.counter).select()\n   d={}\n   for i in var:\n        d["serial"]=i.RollNo\n        d["question"]=i.question\n        d["opt1"]=i.opt1\n        d["opt2"]=i.opt2\n        d["opt3"]=i.opt3\n        d["opt4"]=i.opt4\n\n   import json\n   s = json.dumps(d)\n   nextFlash()\n   return s         \n\ndef nextFlash():\n   try:\n      numb = session.quesNo\n      numb = int(numb)\n      numb = numb + 1\n      print session.ansDict\n      session.flash = "You had selected " + session.ansDict[numb]\n   except:\n      session.flash = "Select an option"\n\ndef prevFlash():\n   try:\n       numb = session.quesNo\n       numb = int(numb)\n       numb = numb - 1\n       print session.ansDict\n       session.flash = "You had selected " + session.ansDict[numb]\n   except:\n       session.flash = "Select an option"\n\ndef prevQuestion():\n   if session.counter == session.first:\n        return dict()\n   session.counter-=1\n   var = db(db.questions.RollNo == session.counter).select()\n   d={}\n   for i in var:\n        d["serial"]=i.RollNo\n        d["question"]=i.question\n        d["opt1"]=i.opt1\n        d["opt2"]=i.opt2\n        d["opt3"]=i.opt3\n        d["opt4"]=i.opt4\n   import json\n   s = json.dumps(d)\n   prevFlash()\n   return s\n         \n\ndef selectedOption():\n    numb = int(session.quesNo)\n    if session.ansDict is None:\n       session.ansDict = {}\n    session.ansDict[numb] = request.vars.value\n    print session.ansDict\n    response.flash = "You selected " + request.vars.value\n    \ndef tempSave():\n    session.quesNo = request.vars.SerialNumber\n\n@auth.requires_login()\ndef quizDone():\n   if session.flag == 0:\n     var = db(db.questions.subcategory == session.subCatNumber).select()\n     for i in var:\n       var1 = int(i.RollNo)\n       if session.ansDict.has_key(var1):\n         print session.ansDict\n         print var1\n         if i.answer == session.ansDict[var1]:\n           session.correctNo += 1\n           session.score += 3\n         elif i.answer != session.ansDict[var1]:\n           session.wrongNo += 1\n           session.score -=1\n         else:\n           pass\n       else:\n         pass \n     session.notAttempted = 4 - len(session.ansDict)\n     db.userScore.bulk_insert([{\'Correctans\':session.correctNo,\'Wrongans\':session.wrongNo,\'Notattempted\':session.notAttempted,\'Score\':session.score}])\n     session.flag = 1\n   else:\n     pass  \n\n   return dict(correct=session.correctNo,wrong=session.wrongNo,unattempted=session.notAttempted,score=session.score)\n\ndef memorygame():\n  return dict()\n\ndef dodgeball():\n  return dict()\n  \ndef game():\n  return dict()\n\n@auth.requires_login()\ndef stats():\n  form,results = dynamic_search(db.userScore)\n  table=db(db.userScore.userid==auth.user.id).select(db.userScore.Correctans,db.userScore.Wrongans,db.userScore.Notattempted,db.userScore.Score)\n  rows=db(db.userScore.userid==auth.user.id).select()\n  correct=0;\n  wrong=0\n  avg_score=0\n  unattempted=0\n  length=len(rows)\n  scores=[]\n  \n  for row in rows:\n    correct+=row.Correctans\n    wrong+=row.Wrongans\n    avg_score+=row.Score\n    unattempted+=row.Notattempted\n    scores.append(int(row.Score))\n  \n  if length!=0:\n    correct=float(correct)/length\n    wrong=float(wrong)/length\n    avg_score=float(avg_score)/length\n    unattempted=float(unattempted)/length\n\n  correct=round(correct,2)\n  wrong=round(wrong,2)\n  avg_score=round(avg_score,2)\n  unattempted=round(unattempted,2)\n\n  labels=[]\n  tool=[]\n  for i in range(length):\n    labels.append("quiz_"+str(i+1))\n    tool.append(str(labels[i])+ ":" + str(scores[i]))\n  return dict(form=form,results=results,table=table,tool=tool,scores=scores,labels=labels,correct=correct,wrong=wrong,avg_score=avg_score,unattempted=unattempted)\n\ndef cats():\n   session.cat = request.vars.val\n\n@auth.requires_login()\ndef build_query(field, op, value):\n    if op == \'equals\':\n        return field == value\n    elif op == \'not equal\':\n        return field != value\n    elif op == \'greater than\':\n        return field > value\n    elif op == \'less than\':\n        return field < value\n    elif op == \'starts with\':\n        return field.like(value+\'%\')\n    elif op == \'ends with\':\n        return field.like(\'%\'+value)\n    elif op == \'contains\':\n        return field.like(\'%\'+value+\'%\')\n\n@auth.requires_login()\ndef dynamic_search(table):\n    tbl = TABLE()\n    selected = []\n    ops = [\'equals\',\'not equal\',\'greater than\',\'less than\',\n           \'starts with\',\'ends with\',\'contains\']\n    query = table.id > 0    \n    for field in table.fields:\n        if (field==\'id\' or field==\'userid\'):\n          pass\n        else:\n          chkval = request.vars.get(\'chk\'+field,None)\n          txtval = request.vars.get(\'txt\'+field,None)\n          opval = request.vars.get(\'op\'+field,None)\n          row = TR(TD(INPUT(_type="checkbox",_name="chk"+field,\n                          value=chkval==\'on\')),\n            TD(field),TD(SELECT(ops,_name="op"+field,\n                                     value=opval)),\n            TD(INPUT(_type="text",_name="txt"+field,\n                          _value=txtval)))\n          tbl.append(row)\n          if chkval:\n            if txtval:\n              query &= build_query(table[field], \n                                opval,txtval)\n          selected.append(table[field])           \n    form = FORM(tbl,INPUT(_type="submit"))\n    if auth.user:\n      results = db(query&(db.userScore.userid==auth.user.id)).select(*selected)\n    return form, results\n\n@auth.requires_login()\ndef search():\n    form,results = dynamic_search(db.userScore)\n    return dict(form=form,results=results)\n\nresponse._vars=response._caller(all_records)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project/controllers/default.py", line 349, in <module>\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/applications/project/controllers/default.py", line 96, in all_records\n    grid = SQLFORM.grid(db.auth.settings.table_user_name,user_signature=False)\n  File "/ug/ug2k13/cse/sharvil.katariya/Downloads/web2py/gluon/dal.py", line 8329, in __getattr__\n    return ogetattr(self, key)\nAttributeError: \'DAL\' object has no attribute \'auth\'\n'
p11
s.